name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    #Providing Aws Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init


    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file="terrafrom.tfvars" -no-color
      continue-on-error: true

    - name: Comment on PR
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        format_out: ${{ steps.fmt.outputs.stdout }}
        format_err: ${{ steps.fmt.outputs.stderr }}
        init_out: ${{ steps.init.outputs.stdout }}
        init_err: ${{ steps.init.outputs.stderr }}
        validate_out: ${{ steps.validate.outputs.stdout }}
        validate_err: ${{ steps.validate.outputs.stderr }}
        plan: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GT }}
        script: |
          const CODE_BLOCK = '```';
          const fmt_result = '${{ steps.fmt.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const init_result = '${{ steps.init.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const validate_result = '${{ steps.validate.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const plan_result = '${{ steps.plan.outcome }}' === 'failure' ? ':x:' : ':heavy_check_mark:';
          const output = `
          ### ${ fmt_result } Terraform Format and Style üé®
          <details><summary>Logs</summary>
          Output
          ${ CODE_BLOCK }diff
          ${ process.env.format_out }
          ${ CODE_BLOCK }
          Errors
          ${ CODE_BLOCK }
          ${ process.env.format_err }
          ${ CODE_BLOCK }
          </details> <!-- End Format Logs -->
          ### ${ init_result } Terraform Initialization ‚öôÔ∏è
          <details><summary>Logs</summary>
          Output
          ${ CODE_BLOCK }
          ${ process.env.init_out }
          ${ CODE_BLOCK }
          Errors
          ${ CODE_BLOCK }
          ${ process.env.init_err }
          ${ CODE_BLOCK }
          </details> <!-- End Init Logs -->
          ### ${ validate_result } Terraform Validation ü§ñ
          <details><summary>Logs</summary>
          Output
          ${ CODE_BLOCK }
          ${ process.env.validate_out }
          ${ CODE_BLOCK }
          Errors
          ${ CODE_BLOCK }
          ${ process.env.validate_err }
          ${ CODE_BLOCK }
          </details> <!-- End Validate Logs -->
          ### ${ plan_result } Terraform Plan üìñ
          <details><summary>Logs</summary>
          ${ CODE_BLOCK }terraform
          ${ process.env.plan }
          ${ CODE_BLOCK }
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

